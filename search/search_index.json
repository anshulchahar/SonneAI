{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sonne Documentation","text":"<p>Welcome to the official documentation for Sonne, a document analysis application that leverages AI to extract, process, and analyze information from PDF documents.</p>"},{"location":"#overview","title":"Overview","text":"<p>Sonne combines the power of PDF processing libraries with Google's Gemini API to provide intelligent document analysis. The application is built with Next.js 14 and provides both a web interface and API endpoints for document processing.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>PDF Text Extraction: Extract text content from PDF documents</li> <li>AI-Powered Analysis: Process document content using Google's Gemini API</li> <li>Modern Web Interface: User-friendly interface built with Next.js and Tailwind CSS</li> <li>API Access: Programmatic access via Next.js API routes</li> <li>Document History: Track and revisit previous document analyses</li> <li>Dark Mode Support: Comfortable viewing experience in any lighting condition</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<p>Sonne follows a modern Next.js application structure:</p> <ul> <li><code>src/app</code>: Contains the application routes and pages</li> <li><code>src/components</code>: Reusable React components</li> <li><code>src/services</code>: Core services for PDF processing and Gemini API integration</li> <li><code>src/utils</code>: Utility functions for API handling, file validation, and more</li> <li><code>src/types</code>: TypeScript type definitions</li> <li><code>prisma</code>: Database schema and configuration</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To start using Sonne, see the Getting Started guide.</p>"},{"location":"#license","title":"License","text":"<p>Sonne is released under the license included in the repository.</p>"},{"location":"#source-code","title":"Source Code","text":"<p>The source code is available on GitHub.</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to Sonne will be documented in this file.</p>"},{"location":"about/changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial project structure</li> <li>PDF text extraction using PyPDF</li> <li>Document analysis with Google Gemini API</li> <li>Web interface with Flask</li> <li>API endpoints for document processing</li> <li>Documentation site with MkDocs</li> </ul>"},{"location":"about/changelog/#010-yyyy-mm-dd","title":"[0.1.0] - YYYY-MM-DD","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release</li> <li>Basic PDF text extraction</li> <li>Integration with Google Gemini API</li> <li>Simple web interface for document uploads</li> </ul>"},{"location":"about/license/","title":"License","text":"<p>Sonne is released under the MIT License.</p>"},{"location":"about/license/#mit-license","title":"MIT License","text":"<p>Copyright \u00a9 2023 Sonne Contributors</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"api-reference/app-routes/","title":"Application Routes Reference","text":"<p>This page documents the Next.js application routes and API endpoints available in Sonne.</p>"},{"location":"api-reference/app-routes/#web-interface-routes","title":"Web Interface Routes","text":""},{"location":"api-reference/app-routes/#get","title":"<code>GET /</code>","text":"<p>The main application route that renders the home page with document upload functionality.</p> <p>Response: Next.js rendered page with document upload form.</p>"},{"location":"api-reference/app-routes/#get-authsignin","title":"<code>GET /auth/signin</code>","text":"<p>Authentication page for user sign-in.</p> <p>Response: Next.js rendered sign-in page.</p>"},{"location":"api-reference/app-routes/#get-history","title":"<code>GET /history</code>","text":"<p>View history of previously analyzed documents.</p> <p>Response: Next.js rendered page displaying document analysis history.</p>"},{"location":"api-reference/app-routes/#get-analysisid","title":"<code>GET /analysis/[id]</code>","text":"<p>View detailed results for a specific document analysis.</p> <p>URL Parameters: - <code>id</code>: Unique identifier for the analysis</p> <p>Response: Next.js rendered page showing detailed analysis results.</p>"},{"location":"api-reference/app-routes/#api-endpoints","title":"API Endpoints","text":""},{"location":"api-reference/app-routes/#post-apisimple-upload","title":"<code>POST /api/simple-upload</code>","text":"<p>Endpoint for uploading PDF documents.</p> <p>Request: - Content-Type: <code>multipart/form-data</code> - Body: Form data with file containing the PDF document</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"fileId\": \"unique-file-identifier\",\n  \"message\": \"File uploaded successfully\"\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#post-apianalyze-completeroute","title":"<code>POST /api/analyze-complete/route</code>","text":"<p>Endpoint for analyzing a previously uploaded document.</p> <p>Request: - Content-Type: <code>application/json</code> - Body: <pre><code>{\n  \"fileId\": \"unique-file-identifier\",\n  \"options\": {\n    \"extractImages\": false,\n    \"includeMetadata\": true\n  }\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"analysisId\": \"unique-analysis-id\",\n  \"status\": \"completed\",\n  \"results\": {\n    \"summary\": \"Document summary...\",\n    \"keyPoints\": [\"Point 1\", \"Point 2\"],\n    \"metadata\": {\n      \"title\": \"Document Title\",\n      \"author\": \"Author Name\",\n      \"pageCount\": 10\n    }\n  }\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#get-apianalysisidroute","title":"<code>GET /api/analysis/[id]/route</code>","text":"<p>Endpoint for retrieving a specific analysis.</p> <p>URL Parameters: - <code>id</code>: Unique identifier for the analysis</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"analysis\": {\n    \"id\": \"unique-analysis-id\",\n    \"fileId\": \"unique-file-identifier\",\n    \"timestamp\": \"2025-04-01T15:30:45\",\n    \"results\": {\n      \"summary\": \"Document summary...\",\n      \"keyPoints\": [\"Point 1\", \"Point 2\"]\n    },\n    \"status\": \"completed\"\n  }\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#get-apihistoryroute","title":"<code>GET /api/history/route</code>","text":"<p>Endpoint for retrieving a list of previous document analyses.</p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"analyses\": [\n    {\n      \"id\": \"unique-analysis-id-1\",\n      \"filename\": \"document1.pdf\",\n      \"timestamp\": \"2025-04-01T12:34:56\",\n      \"status\": \"completed\"\n    },\n    {\n      \"id\": \"unique-analysis-id-2\",\n      \"filename\": \"document2.pdf\",\n      \"timestamp\": \"2025-04-02T10:11:12\",\n      \"status\": \"processing\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api-reference/app-routes/#authentication","title":"Authentication","text":"<p>The application uses NextAuth.js for authentication. API endpoints are protected using middleware that verifies authentication status.</p>"},{"location":"api-reference/app-routes/#getpost-apiauthnextauthroute","title":"<code>GET/POST /api/auth/[...nextauth]/route</code>","text":"<p>NextAuth.js authentication endpoints.</p>"},{"location":"api-reference/app-routes/#error-handling","title":"Error Handling","text":"<p>All API endpoints return appropriate HTTP status codes:</p> <ul> <li><code>200 OK</code>: Request successful</li> <li><code>400 Bad Request</code>: Invalid request parameters</li> <li><code>401 Unauthorized</code>: Authentication required</li> <li><code>403 Forbidden</code>: Insufficient permissions</li> <li><code>404 Not Found</code>: Resource not found</li> <li><code>415 Unsupported Media Type</code>: Unsupported file format</li> <li><code>500 Internal Server Error</code>: Server-side error</li> </ul> <p>Error responses include a JSON object with error details:</p> <pre><code>{\n  \"success\": false,\n  \"error\": \"Error message\",\n  \"code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api-reference/gemini-api/","title":"Gemini API Integration","text":"<p>This page documents the Google Gemini API integration in Sonne.</p>"},{"location":"api-reference/gemini-api/#gemini-service-module","title":"Gemini Service Module","text":"<p>The <code>src/services/gemini.ts</code> module provides functions for interacting with Google's Gemini API to analyze document content.</p>"},{"location":"api-reference/gemini-api/#analyzetexttext-string-options-analysisoptions-promiseanalysisresult","title":"<code>analyzeText(text: string, options?: AnalysisOptions): Promise&lt;AnalysisResult&gt;</code>","text":"<p>Analyzes text content using the Gemini API.</p> <p>Parameters:</p> <ul> <li><code>text</code> (string): Text content to analyze</li> <li><code>options</code> (AnalysisOptions, optional): Configuration options including:</li> <li><code>mode</code>: Analysis mode (default: \"general\")</li> <li><code>maxLength</code>: Maximum response length</li> <li><code>temperature</code>: Model temperature setting</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;AnalysisResult&gt;</code>: Analysis results with structure defined by the AnalysisResult type</li> </ul> <p>Example:</p> <pre><code>import { analyzeText } from '@/services/gemini';\n\nasync function performAnalysis() {\n  const text = \"Your document text here...\";\n  const analysis = await analyzeText(text, { mode: \"summary\" });\n  console.log(`Summary: ${analysis.summary}`);\n}\n</code></pre>"},{"location":"api-reference/gemini-api/#askquestioncontext-string-question-string-promisestring","title":"<code>askQuestion(context: string, question: string): Promise&lt;string&gt;</code>","text":"<p>Asks a specific question about the document content.</p> <p>Parameters:</p> <ul> <li><code>context</code> (string): Document text content</li> <li><code>question</code> (string): Question to ask about the document</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;string&gt;</code>: Answer to the question</li> </ul> <p>Example:</p> <pre><code>import { askQuestion } from '@/services/gemini';\n\nasync function questionDocument() {\n  const text = \"Your document text here...\";\n  const question = \"What is the main topic of this document?\";\n  const answer = await askQuestion(text, question);\n  console.log(`Q: ${question}`);\n  console.log(`A: ${answer}`);\n}\n</code></pre>"},{"location":"api-reference/gemini-api/#analyzewithprompttext-string-prompt-string-promisestring","title":"<code>analyzeWithPrompt(text: string, prompt: string): Promise&lt;string&gt;</code>","text":"<p>Analyzes text using a custom prompt template.</p> <p>Parameters:</p> <ul> <li><code>text</code> (string): Document text content</li> <li><code>prompt</code> (string): Custom prompt template to use for analysis</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;string&gt;</code>: Generated response from the model</li> </ul> <p>Example:</p> <pre><code>import { analyzeWithPrompt } from '@/services/gemini';\nimport { EXTRACT_KEY_POINTS } from '@/config/prompts';\n\nasync function extractKeyPoints() {\n  const text = \"Your document text here...\";\n  const keyPoints = await analyzeWithPrompt(text, EXTRACT_KEY_POINTS);\n  console.log(keyPoints);\n}\n</code></pre>"},{"location":"api-reference/gemini-api/#type-definitions","title":"Type Definitions","text":"<p>The module uses TypeScript interfaces to define data structures:</p> <pre><code>interface AnalysisOptions {\n  mode?: \"general\" | \"summary\" | \"entities\" | \"sentiment\";\n  maxLength?: number;\n  temperature?: number;\n}\n\ninterface AnalysisResult {\n  summary: string;\n  keyPoints: string[];\n  entities?: {\n    name: string;\n    type: string;\n  }[];\n  sentiment?: {\n    score: number;\n    label: \"positive\" | \"negative\" | \"neutral\";\n  };\n  metadata?: Record&lt;string, any&gt;;\n}\n</code></pre>"},{"location":"api-reference/gemini-api/#configuration","title":"Configuration","text":"<p>The Gemini API integration requires an API key to be configured. This is managed through environment variables:</p> <ol> <li> <p>In a <code>.env.local</code> file in the project root directory:    <pre><code>GEMINI_API_KEY=your_api_key_here\n</code></pre></p> </li> <li> <p>Or through Next.js environment configuration:    <pre><code>// In next.config.mjs\nconst nextConfig = {\n  env: {\n    GEMINI_API_KEY: process.env.GEMINI_API_KEY,\n  },\n  // Other configuration...\n};\n</code></pre></p> </li> </ol>"},{"location":"api-reference/pdf-processor/","title":"PDF Processor","text":"<p>This page documents the PDF processing functionality available in Sonne.</p>"},{"location":"api-reference/pdf-processor/#pdf-service-module","title":"PDF Service Module","text":"<p>The <code>src/services/pdf.ts</code> module provides functions for extracting and processing text from PDF documents.</p>"},{"location":"api-reference/pdf-processor/#extracttextfile-file-buffer-promisestring","title":"<code>extractText(file: File | Buffer): Promise&lt;string&gt;</code>","text":"<p>Extracts text content from a PDF file.</p> <p>Parameters:</p> <ul> <li><code>file</code> (File | Buffer): PDF file as either a browser File object or Node.js Buffer</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;string&gt;</code>: Extracted text content from the PDF</li> </ul> <p>Example:</p> <pre><code>import { extractText } from '@/services/pdf';\n\n// In browser context\nconst fileInput = document.querySelector&lt;HTMLInputElement&gt;('input[type=\"file\"]');\nif (fileInput?.files?.length) {\n  const text = await extractText(fileInput.files[0]);\n  console.log(text);\n}\n\n// In server context\nimport fs from 'fs/promises';\nconst buffer = await fs.readFile('path/to/document.pdf');\nconst text = await extractText(buffer);\nconsole.log(text);\n</code></pre>"},{"location":"api-reference/pdf-processor/#extractmetadatafile-file-buffer-promisepdfmetadata","title":"<code>extractMetadata(file: File | Buffer): Promise&lt;PDFMetadata&gt;</code>","text":"<p>Extracts metadata from a PDF file.</p> <p>Parameters:</p> <ul> <li><code>file</code> (File | Buffer): PDF file as either a browser File object or Node.js Buffer</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;PDFMetadata&gt;</code>: Object containing metadata such as:</li> <li><code>title</code>: Document title</li> <li><code>author</code>: Author name</li> <li><code>creator</code>: Creator application</li> <li><code>producer</code>: Producer application</li> <li><code>creationDate</code>: Date when the document was created</li> <li><code>modificationDate</code>: Date when the document was last modified</li> <li><code>pageCount</code>: Number of pages in the document</li> </ul> <p>Example:</p> <pre><code>import { extractMetadata } from '@/services/pdf';\n\nasync function getDocumentInfo(file: File) {\n  const metadata = await extractMetadata(file);\n  console.log(`Document title: ${metadata.title}`);\n  console.log(`Author: ${metadata.author}`);\n  console.log(`Pages: ${metadata.pageCount}`);\n}\n</code></pre>"},{"location":"api-reference/pdf-processor/#processpdffile-file-buffer-options-processoptions-promiseprocessedpdf","title":"<code>processPDF(file: File | Buffer, options?: ProcessOptions): Promise&lt;ProcessedPDF&gt;</code>","text":"<p>Processes a PDF document and returns both text content and metadata.</p> <p>Parameters:</p> <ul> <li><code>file</code> (File | Buffer): PDF file as either a browser File object or Node.js Buffer</li> <li><code>options</code> (ProcessOptions, optional): Configuration options for processing:</li> <li><code>extractImages</code> (boolean): Whether to extract embedded images</li> <li><code>useOCR</code> (boolean): Whether to apply OCR on image-based content</li> <li><code>pageRange</code> (array): Range of pages to process (e.g., <code>[1, 10]</code>)</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;ProcessedPDF&gt;</code>: Object containing:</li> <li><code>text</code>: Extracted text content</li> <li><code>metadata</code>: Document metadata</li> <li><code>pages</code>: List of page-specific content</li> </ul> <p>Example:</p> <pre><code>import { processPDF } from '@/services/pdf';\n\nasync function analyzePDF(file: File) {\n  const options = {\n    extractImages: false,\n    useOCR: true,\n    pageRange: [1, 5]\n  };\n\n  const result = await processPDF(file, options);\n  console.log(`Document text: ${result.text.substring(0, 100)}...`);  // First 100 chars\n  console.log(`Total pages processed: ${result.pages.length}`);\n}\n</code></pre>"},{"location":"api-reference/pdf-processor/#utility-functions","title":"Utility Functions","text":""},{"location":"api-reference/pdf-processor/#validatepdffile-file-promiseboolean","title":"<code>validatePDF(file: File): Promise&lt;boolean&gt;</code>","text":"<p>Validates if a file is a valid PDF.</p> <p>Parameters:</p> <ul> <li><code>file</code> (File): File to validate</li> </ul> <p>Returns:</p> <ul> <li><code>Promise&lt;boolean&gt;</code>: Whether the file is a valid PDF</li> </ul> <p>Example:</p> <pre><code>import { validatePDF } from '@/utils/fileValidation';\n\nasync function handleFileUpload(file: File) {\n  if (await validatePDF(file)) {\n    console.log('Valid PDF file');\n    // Process the file\n  } else {\n    console.error('Invalid PDF file');\n    // Show error message\n  }\n}\n</code></pre>"},{"location":"api-reference/pdf-processor/#type-definitions","title":"Type Definitions","text":"<p>The module uses TypeScript interfaces to define data structures:</p> <p>```typescript interface PDFMetadata {   title?: string;   author?: string;   creator?: string;   producer?: string;   creationDate?: Date;   modificationDate?: Date;   pageCount: number; }</p> <p>interface ProcessOptions {   extractImages?: boolean;   useOCR?: boolean;   pageRange?: [number, number]; }</p> <p>interface PageContent {   pageNumber: number;   text: string;   images?: string[];  // Base64 encoded images if extractImages is true }</p> <p>interface ProcessedPDF {   text: string;   metadata: PDFMetadata;   pages: PageContent[]; }</p>"},{"location":"development/contributing/","title":"Contributing to Sonne","text":"<p>Thank you for your interest in contributing to Sonne! This document provides guidelines and instructions to help you get started.</p>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>By participating in this project, you agree to abide by our Code of Conduct.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 16.x or higher (Check project's specific requirements if available)</li> <li>npm (usually comes with Node.js)</li> <li>Git</li> <li>Prisma CLI (can be installed via npm)</li> </ul>"},{"location":"development/contributing/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:     <pre><code>git clone https://github.com/YOUR-USERNAME/sonne.git\ncd sonne/nextjs-temp # Navigate into the Next.js project directory\n</code></pre></li> <li>Set up the development environment:     <pre><code># Install dependencies\nnpm install\n\n# Set up the database (ensure your .env file is configured if needed)\nnpx prisma generate\nnpx prisma db push # Apply schema changes to your local database\n</code></pre></li> <li>Start the development server:     <pre><code>npm run dev\n</code></pre></li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a new branch for your feature or bugfix:     <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and commit them with clear, descriptive commit messages:     <pre><code>git commit -am \"feat: Add feature: brief description\" # Example using conventional commits\n</code></pre></li> <li>Push your branch to your fork:     <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Submit a pull request to the main repository's <code>main</code> branch.</li> </ol>"},{"location":"development/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update the README.md or documentation (<code>/docs</code>) with details of changes if appropriate.</li> <li>Ensure your code passes linting checks:     <pre><code>npm run lint\n</code></pre></li> <li>Add tests for new functionality if applicable (Note: Testing setup might need to be added).</li> <li>Ensure your code follows the project's coding standards.</li> <li>Your PR will be reviewed by at least one maintainer.</li> <li>Address any feedback from the code review.</li> </ol>"},{"location":"development/contributing/#coding-standards","title":"Coding Standards","text":"<ol> <li>Follow the configured ESLint rules (<code>npm run lint</code> to check).</li> <li>Use meaningful variable and function names.</li> <li>Write TSDoc/JSDoc comments for functions, classes, and complex logic.</li> <li>Keep functions focused on a single responsibility.</li> <li>Follow Next.js and React best practices.</li> </ol>"},{"location":"development/contributing/#testing","title":"Testing","text":"<ol> <li>Write tests for new features and bug fixes where applicable. (Note: A testing framework like Jest or Vitest might need to be configured).</li> <li>Ensure any existing tests pass before submitting your PR.</li> </ol>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<ol> <li>Update documentation for any new features or changes</li> <li>Use clear and concise language</li> <li>Provide examples where appropriate</li> </ol>"},{"location":"development/contributing/#reporting-bugs","title":"Reporting Bugs","text":"<ol> <li>Report bugs by creating issues on GitHub with:<ul> <li>A clear description of the issue</li> <li>Steps to reproduce the behavior</li> <li>Expected behavior</li> <li>Screenshots if applicable</li> <li>Any additional context</li> </ul> </li> </ol>"},{"location":"development/contributing/#feature-requests","title":"Feature Requests","text":"<ol> <li>Feature requests are welcome! Please provide:<ul> <li>A clear description of the feature</li> <li>The motivation or use case for the feature</li> <li>Any ideas for implementation</li> </ul> </li> </ol>"},{"location":"development/contributing/#questions-or-need-help","title":"Questions or Need Help?","text":"<p>Feel free to open an issue with your questions or reach out to the maintainers.</p> <p>Thank you for contributing to Sonne!</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This guide provides information about testing the Sonne application.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>The Sonne test suite is divided into several categories:</p> <ul> <li>Unit Tests: Test individual components in isolation</li> <li>Integration Tests: Test interactions between multiple components</li> <li>End-to-End Tests: Test complete application workflows</li> </ul>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":""},{"location":"development/testing/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have all development dependencies installed:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"development/testing/#running-the-test-suite","title":"Running the Test Suite","text":"<p>To run the entire test suite:</p> <pre><code>pytest\n</code></pre>"},{"location":"development/testing/#running-specific-test-categories","title":"Running Specific Test Categories","text":"<p>To run only unit tests:</p> <pre><code>pytest tests/unit/\n</code></pre> <p>To run only integration tests:</p> <pre><code>pytest tests/integration/\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>To run tests with coverage reporting:</p> <pre><code>pytest --cov=. tests/\n</code></pre> <p>For a detailed HTML coverage report:</p> <pre><code>pytest --cov=. --cov-report=html tests/\n</code></pre> <p>The HTML report will be available in the <code>htmlcov</code> directory.</p>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":""},{"location":"development/testing/#unit-test-example","title":"Unit Test Example","text":"<p>Here's an example of a unit test for the PDF processor:</p> <pre><code># tests/unit/test_pdf_processor.py\nimport pytest\nfrom pdf_processor import extract_text\n\ndef test_extract_text():\n    # Setup test data\n    test_file = \"tests/fixtures/sample.pdf\"\n\n    # Call the function\n    result = extract_text(test_file)\n\n    # Assert expectations\n    assert isinstance(result, str)\n    assert \"Expected sample text\" in result\n    assert len(result) &gt; 0\n</code></pre>"},{"location":"development/testing/#integration-test-example","title":"Integration Test Example","text":"<p>Here's an example of an integration test:</p> <pre><code># tests/integration/test_analysis_workflow.py\nimport pytest\nfrom pdf_processor import extract_text\nfrom gemini_api_handler import analyze_text\n\ndef test_document_analysis_workflow():\n    # Extract text from test document\n    test_file = \"tests/fixtures/sample.pdf\"\n    text = extract_text(test_file)\n\n    # Pass the extracted text to the Gemini API handler\n    analysis = analyze_text(text, analysis_type=\"summary\")\n\n    # Assert expectations\n    assert \"summary\" in analysis\n    assert len(analysis[\"summary\"]) &gt; 0\n</code></pre>"},{"location":"development/testing/#mock-testing","title":"Mock Testing","text":"<p>For tests that require API calls, we use mocks to avoid real API calls during testing:</p> <pre><code># tests/unit/test_gemini_api.py\nimport pytest\nfrom unittest.mock import patch\nfrom gemini_api_handler import analyze_text\n\n@patch(\"gemini_api_handler.google.generativeai.GenerativeModel\")\ndef test_analyze_text_with_mock(mock_generative_model):\n    # Set up the mock\n    mock_instance = mock_generative_model.return_value\n    mock_instance.generate_content.return_value.text = \"Mocked summary\"\n\n    # Call the function\n    result = analyze_text(\"This is some test content\", analysis_type=\"summary\")\n\n    # Assert expectations\n    assert result[\"summary\"] == \"Mocked summary\"\n    mock_instance.generate_content.assert_called_once()\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<p>We use pytest fixtures to set up test data and dependencies:</p> <pre><code># tests/conftest.py\nimport pytest\nimport tempfile\nimport os\n\n@pytest.fixture\ndef sample_pdf_file():\n    \"\"\"Fixture that provides a path to a sample PDF file.\"\"\"\n    # Return path to a test fixture file\n    return os.path.join(os.path.dirname(__file__), \"fixtures\", \"sample.pdf\")\n\n@pytest.fixture\ndef mock_gemini_api():\n    \"\"\"Fixture that mocks the Gemini API responses.\"\"\"\n    with patch(\"gemini_api_handler.google.generativeai.GenerativeModel\") as mock:\n        mock_instance = mock.return_value\n        mock_instance.generate_content.return_value.text = \"Mock response\"\n        yield mock_instance\n</code></pre>"},{"location":"user-guide/examples/","title":"Usage Examples","text":"<p>This page provides practical examples of how to use Sonne for various document analysis tasks.</p>"},{"location":"user-guide/examples/#web-interface-examples","title":"Web Interface Examples","text":""},{"location":"user-guide/examples/#analyzing-a-research-paper","title":"Analyzing a Research Paper","text":"<ol> <li>Upload your research paper PDF through the web interface</li> <li>Select the \"Research Analysis\" template from the dropdown menu</li> <li>Click \"Process Document\"</li> <li>Review the generated summary, key findings, and citations</li> </ol>"},{"location":"user-guide/examples/#extracting-contract-information","title":"Extracting Contract Information","text":"<ol> <li>Upload your contract PDF</li> <li>Select the \"Contract Analysis\" template</li> <li>Click \"Process Document\"</li> <li>Review the parties involved, key dates, obligations, and terms highlighted in the analysis</li> </ol>"},{"location":"user-guide/examples/#analyzing-financial-reports","title":"Analyzing Financial Reports","text":"<ol> <li>Upload your financial report PDF</li> <li>Select the \"Financial Analysis\" template</li> <li>Click \"Process Document\"</li> <li>Review the key financial metrics, trends, and risk factors identified</li> </ol>"},{"location":"user-guide/examples/#api-usage-examples","title":"API Usage Examples","text":""},{"location":"user-guide/examples/#basic-document-upload-and-analysis","title":"Basic Document Upload and Analysis","text":"<pre><code>import requests\n\n# API endpoint\nurl = \"https://your-sonne-instance.com/api/analyze\"\n\n# Upload file and request analysis\nfiles = {\"document\": open(\"example.pdf\", \"rb\")}\ndata = {\"analysis_type\": \"standard\"}\n\nresponse = requests.post(url, files=files, data=data)\nresults = response.json()\n\n# Print analysis results\nprint(results[\"summary\"])\nprint(results[\"entities\"])\n</code></pre>"},{"location":"user-guide/examples/#custom-analysis-with-specific-questions","title":"Custom Analysis with Specific Questions","text":"<pre><code>import requests\n\n# API endpoint\nurl = \"https://your-sonne-instance.com/api/analyze\"\n\n# Upload file and request custom analysis\nfiles = {\"document\": open(\"report.pdf\", \"rb\")}\ndata = {\n    \"analysis_type\": \"custom\",\n    \"questions\": [\n        \"What is the main conclusion?\",\n        \"What methodology was used?\",\n        \"What are the key limitations mentioned?\"\n    ]\n}\n\nresponse = requests.post(url, files=files, data=data)\nresults = response.json()\n\n# Process the answers to your questions\nfor question, answer in zip(data[\"questions\"], results[\"answers\"]):\n    print(f\"Q: {question}\")\n    print(f\"A: {answer}\")\n    print()\n</code></pre>"},{"location":"user-guide/examples/#batch-processing-multiple-documents","title":"Batch Processing Multiple Documents","text":"<pre><code>import requests\nimport os\n\n# API endpoint\nurl = \"https://your-sonne-instance.com/api/batch\"\n\n# Prepare multiple files\nfiles = []\nfor filename in os.listdir(\"documents\"):\n    if filename.endswith(\".pdf\"):\n        files.append((\"documents\", open(f\"documents/{filename}\", \"rb\")))\n\n# Request batch analysis\ndata = {\"analysis_type\": \"standard\"}\nresponse = requests.post(url, files=files, data=data)\nbatch_id = response.json()[\"batch_id\"]\n\n# Check status and retrieve results when ready\nstatus_url = f\"https://your-sonne-instance.com/api/batch/{batch_id}\"\nstatus_response = requests.get(status_url)\nresults = status_response.json()\n\nprint(f\"Processed {len(results['documents'])} documents\")\n</code></pre>"},{"location":"user-guide/features/","title":"Sonne Features","text":"<p>This page provides a comprehensive overview of the features available in Sonne.</p>"},{"location":"user-guide/features/#pdf-processing-features","title":"PDF Processing Features","text":""},{"location":"user-guide/features/#text-extraction","title":"Text Extraction","text":"<p>Sonne uses PyPDF to extract text content from PDF documents with high accuracy. The text extraction:</p> <ul> <li>Preserves document structure where possible</li> <li>Handles multi-column layouts</li> <li>Extracts text from tables and forms</li> <li>Works with scanned documents (when text is selectable)</li> </ul>"},{"location":"user-guide/features/#metadata-extraction","title":"Metadata Extraction","text":"<p>The application can extract the following metadata from PDF documents:</p> <ul> <li>Document title</li> <li>Author information</li> <li>Creation and modification dates</li> <li>Page count and dimensions</li> <li>Document encryption status</li> </ul>"},{"location":"user-guide/features/#ai-analysis-features","title":"AI Analysis Features","text":""},{"location":"user-guide/features/#content-summarization","title":"Content Summarization","text":"<p>Using Google's Gemini API, Sonne can generate concise summaries of document content, highlighting:</p> <ul> <li>Key topics and themes</li> <li>Main arguments or points</li> <li>Important facts and figures</li> </ul>"},{"location":"user-guide/features/#named-entity-recognition","title":"Named Entity Recognition","text":"<p>Identify and categorize key entities in the document:</p> <ul> <li>People and organizations</li> <li>Locations</li> <li>Dates and time expressions</li> <li>Monetary values</li> <li>Percentages and quantities</li> </ul>"},{"location":"user-guide/features/#question-answering","title":"Question Answering","text":"<p>Ask specific questions about document content:</p> <ul> <li>\"What is the main conclusion of this report?\"</li> <li>\"When was the project completed?\"</li> <li>\"How much funding was allocated to Department X?\"</li> </ul>"},{"location":"user-guide/features/#web-interface-features","title":"Web Interface Features","text":"<ul> <li>Drag-and-drop document upload</li> <li>Interactive analysis results</li> <li>Document history and saved analyses</li> <li>Export results in multiple formats (JSON, CSV, PDF)</li> </ul>"},{"location":"user-guide/features/#api-features","title":"API Features","text":"<p>Sonne provides a RESTful API for integration with other systems:</p> <ul> <li>Document upload endpoint</li> <li>Analysis request endpoints</li> <li>Results retrieval endpoints</li> <li>Batch processing capabilities</li> </ul>"},{"location":"user-guide/getting-started/","title":"Getting Started with Sonne","text":"<p>This guide will help you install, configure, and start using Sonne for your document analysis needs.</p>"},{"location":"user-guide/getting-started/#installation","title":"Installation","text":""},{"location":"user-guide/getting-started/#prerequisites","title":"Prerequisites","text":"<p>Before installing Sonne, ensure you have the following:</p> <ul> <li>Node.js 18.x or higher</li> <li>npm or yarn package manager</li> <li>Google Gemini API key</li> </ul>"},{"location":"user-guide/getting-started/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<pre><code>git clone https://github.com/anshulchahar/sonne.git\ncd sonne\n</code></pre>"},{"location":"user-guide/getting-started/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># Using npm\nnpm install\n\n# Using yarn\nyarn install\n\n# Using pnpm\npnpm install\n</code></pre>"},{"location":"user-guide/getting-started/#step-3-configure-environment-variables","title":"Step 3: Configure Environment Variables","text":"<p>Create a <code>.env.local</code> file in the project root directory with your API keys:</p> <pre><code>GEMINI_API_KEY=your_gemini_api_key_here\nNEXTAUTH_SECRET=your_nextauth_secret_here\nNEXTAUTH_URL=http://localhost:3000\nDATABASE_URL=\"file:./dev.db\"\n</code></pre>"},{"location":"user-guide/getting-started/#step-4-set-up-the-database","title":"Step 4: Set Up the Database","text":"<p>Initialize the database with Prisma:</p> <pre><code>npx prisma generate\nnpx prisma db push\n</code></pre>"},{"location":"user-guide/getting-started/#running-the-application","title":"Running the Application","text":"<p>Start the development server:</p> <pre><code># Using npm\nnpm run dev\n\n# Using yarn\nyarn dev\n\n# Using pnpm\npnpm dev\n</code></pre> <p>The application will be available at <code>http://localhost:3000</code>.</p>"},{"location":"user-guide/getting-started/#first-steps","title":"First Steps","text":"<ol> <li>Sign In: Create an account or sign in using the authentication options provided.</li> <li>Upload a Document: Navigate to the main page and upload a PDF document using the file uploader.</li> <li>Process the Document: The application will automatically process the document and display the analysis results.</li> <li>Review Results: View the extracted text, summaries, and key points identified by the AI.</li> </ol>"},{"location":"user-guide/getting-started/#production-deployment","title":"Production Deployment","text":"<p>To build the application for production:</p> <pre><code># Using npm\nnpm run build\nnpm start\n\n# Using yarn\nyarn build\nyarn start\n\n# Using pnpm\npnpm build\npnpm start\n</code></pre>"},{"location":"user-guide/getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the different Features available in Sonne</li> <li>See Usage Examples for common use cases</li> <li>Explore the API Reference for programmatic usage</li> <li>Check out the Development Guide to contribute to the project</li> </ul>"}]}